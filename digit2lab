Féléves órai anyag/pótmérés/önálló mérés kidolgozás a Digitális technika 2 laboratórium harcosainak.
-Akik valamelyik automatikára mennek tovább, azoknak illene csak ellenőrzésnek használni.
-A pontosságot nem tudom garantálni. Errlogot szívesen fogadok a mappán belül. 
Van egy ilyenem: http://cl.ly/0s2p1Y0L2H1Q
Hallgass pimpes zenét: https://youtu.be/o7KhVTXKE1Y

=====MÉRÉSPÓTLÁS=====

1. Számolás:
223H= ???B

2. Számolás:
a, 43H XOR 52H= ???H

b, 67H AND 32H= ???H

c, 67H OR 32H= ???H

3. 13H * 45H= ???H

4. Számolás:
a, 1041D= ???H

b, 3A1H= ???D

5. Program: Töltse fel az akkumulátort 182 D értékkel, majd az akku tartalmát DIREKT vigye az 55H című adatregiszterbe, illetve az 56H-ba INDIREKT.

6. Program: 0FFH értékkel egy ciklus felhasználásával 20H címtől kezdődően feltöltünk 60 darab regisztert.

7. Program: Másoljuk át 4000H-tól 5 bájtot a 60H-tól kezdődő címekre.

8. Program: A kódmemória első 5 bájtját az adatmemória 70H-tól kezdődő címekre másoljuk át.

9. Elmélet: Az MCS51-es mikrokontroller belső adatmemóriájának részei.

10. Elmélet: PSEN, RD, WR vezérlőjelek.

11. Elmélet: Mik az SFR regiszterek. Hol helyezkednek el, sorolj fel néhányat.

12. Elmélet: Mit csinál a következő utasítás: MOVC A, @A+DPTR

13. Elmélet: Mutasd be a bitkezelő utasításokat.

14. Elmélet: Hol helyezkedik el, és milyen 2 fő részből áll a bit-címezhető memória. Melyik memóriaterületen vannak a bitenként címezhető regiszterek.

15. Elmélet: Miért és mikor kell a számok előtt # jelet használni. Mi a különbség " MOV A,3 " és " MOV A,#3 " között.

16. Elmélet: ACC=14H és B=23H. Mi lesz a tartalma H formában MUL AB után.

17. Elmélet: Mit tartalmaz a .HEX file, mire kell.

18. Elmélet: Mit tartalmaz és milyen formában egy program lista és egy hex formátumú fájlja?

19. Program: Ciklussal töltse fel 20H címtől 60 bájtot 0FFH értékkel.

20. Panel: Az alsó 3 nyomógombok legyenek bináris helyiértékek. Amelyik le van nyomva, annak a ledje világítson.

21. Elmélet: A 8051-es adatmemóriájának részletes felosztását rajzold le.

22. Program: Mi lesz A, B tartalma H alakban az alábbi program után:
MOV     A, #12H
MOV     B, #34H
RL      A
SWAP    A
SETB    ACC.52
RR      A
MUL     AB
 
23. Program: A és B regiszterek tartalma H alakban az alábbi program után:
MOV     A, #141
MOV     B, #13H
INC     A
RL      A
SWAP    A
INC     A
RR      A
DIV     AB

24. Program: Külső adatmemória 100-as címétől 15 bájt feltöltése 0A5H értékellel, majd ezt másolni a belső adatmemória 50H címétől.

25. Program: F = A * (B + /C) + A*B*C

26. Elmélet: Mit jelent, ha egy szegmens relokálható:

27. Elmélet: Bitcímeket alkalmazva, mi a 22H című regiszter 7. bitjének a bitcíme:

28. Elmélet: Milyen ugró utasítások használhatók bit operandussal:

29. Elmélet: Hogyan lehet szöveget kiíratni a képernyőre soros vonal közvetlen programozásával:

30. Elmélet: Counter/timer modul felépítése és üzemmódjai:

31. Elmélet: Melyek a soros perifériákhoz kapcsolódó regiszerek és bitek:

32. Elmélet: Melyek az időzítő modulokhoz kapcsolódó regiszerek és bitek. Mi a TF0 és a TR0 szerepe: 

33. Elmélet: Melyek a megszakításokhoz kapcsolódó regiszterek és bitek. Mi az EA bit szerepe:

=====ÖNÁLLÓ MÉRÉS=====

1. Alakítsa át az A regiszterben lévő bájtot bináris alakú karaktersorozattá, és tárolja el az IDATA memória 40H címétől kezdődő nyolc szomszédos helyén, és először a legmagasabb helyi érték szerepeljen! Az eredményt írja ki a soros vonalra karakteresen, és a végén küldjön egy- kocsi vissza — soremelést is! (Folyamatábra, kommentezés!) 


2. Olvasson be a billentyűzeten megadott nyolc darab 0 és 1-1)61 álló karaktert a soros vonalon, és tárolja az IDATA memória 40H címétől kezdődően! Alakítsa át az IDATA memória 40H címétől kezdődő nyolc szomszédos helyén letárolt 0 és 1 karakterekből álló karaktersorozatot az A regiszterben lévő bináris értékké. Az eredményt írja vissza a képernyőre, decimálisan! Az első helyen a legmagasabb helyi érték szerepel. (Folyamatábra, kommentezés!) 


3. Írjon programot, amely az A regiszterben lévő bájtot decimális karakterekké alakítva elhelyezi az IDATA memória három szomszédos helyén! Az eredményt küldje kí a soros vonalon! (bin -decimális - ASC konverzió) (Folyamatábra, kommentezés!) 


4. Számolja meg és helyezze el az R3 regiszterbe az A regiszterben lévő 1 értékű bitek számát ASCII karakteres fog mában! Az eredményt küldje ki a soros vonalon! (Folyamatábra, kommentezés!) 


5. Az IDATA memória 40H címén kezdődő 3 ASCII karaktert (mindegyike 0,1,...9) alakítsa át bináris értékké! (decimális ASC - bin konverzió) (Folyamatábra, kommentezés!) 


6. A billentyűport (COOOH) legkisebb helyi-értékein lévő három nyomógombot A, B, C bemenetként, a LED-port (C001 H} legkisebb helyiértékű kimeneti LED -et (F) tekintve, valósítsa meg a következő logikai függvényt: F=A*B*C (A LED akkor világít, ha mindhárom gombot nyomjuk.) illetve az F=A+B+C. (A LED akkor világít, ha bármelyik gombot nyomjuk). (Folyamatábra, kommentezés!) 


7. A billentyűport (0000H) legkisebb helyi-értékein lévő három nyomógombot A, B, C bemenetként, a LED-port (C001H) legkisebb helyi-értékű kimeneti LED -et (F) tekintve, valósítsa meg a kővetkező logikai függvényt: F=(/A*B)+B*C"/A (Folyamatábra, kommentezés!) 


8. Írjon programot, amely a gyakorló alsó öt helyiértékű nvomógombját (C000h cím) bináris értékként beolvassa, és egy táblázat segítségével az érték BCD kódját jeleníti meg a LED diódasoron! (pl: gomb=10011 (13H=19D, LED sor: 0001 1001 (19) (Folyamatábra, kommentezés!) 


9. Írjon programot, amely egy futófényt állít elő a LED parton (0001H cím)! Késleltető hurok segítségével valósítsa meg a késleltetést. Számítsa ki a késleltetés idejét, és állítson be ne&ved másodperces ciklusidőt! (Folyamatábra, kommentezés!) 


10. Készítsen programot, amely a billentyűport (cím: 0000H) legkisebb helyiértékén lévő nyomógomb nyomkodásával felfelé, a következő nyomógomb nyomkodásával lefelé számol! A harmadik nyomógomb megnyomása törli a számlálót! A 8 bites számláló aktuális állapotát a LED soron (C001 H) jelezze ki! (Folyamatábra, kommentezés!) 


11. Készítsen programot, amely a billentyűport (cím: COOOH) legkisebb három helyiértékén lévő nyomögomb kombinációnak megfelelő bináris értéket a LED sor (cím: 0001H) megfelelő LED-jének kigyújtásával kijelzi. (3-ból 8-ra dekódoló) (pl. bill.: 101, akkor az 5. led ég.) (Folyamatábra, kommentezés!) 


12. Készítsen programot, amely a billentyűport (cím: COOOH) legkisebb helyi-értékén lévő nyomógomb nyomkodásával balra rotálja egy LED fényét a LED soron (0001H), azaz eu világító LED balra lépked. A következő nyomógomb nyomkodásával pedig jobbra rotál! (Folyamatábra, kommentezés!) 


13. Írjon programot, amely a soros vonalon beküldött két decimális szám összegét, különbségét, szorzatát és hányadosát kiszámítja, és az eredményt a soros vonalon keresztül a képernyőn megjeleníti! (ADDC, SUBB, MUL, DIV utasítások). (Folyamatábra, kommentezés!) 


14. Készítsen elektronikus kódzárat: a billentyűport (cím: COOOH) legkisebb három helyi-értékén lévő nyomógomb (A, B és C gombok) öt, adott sorrendű megnyomása (és elengedése) hatására gyulladjon ki egy LED 5 másodpercig! (Folyamatábra, kommentezés!) 


=====ÓRAI ANYAG=====

===ELŐLAP===

PROG	SEGMENT	CODE
STACK	SEGMENT	IDATA

V1	EQU	R3
V2	EQU	R4

RSEG	STACK
DS	16
RSEG	PROG
	MOV	SP,#STACK-1
	
	MOV	DPTR,#NEV
	
===FŐCIKLUSOK===

=1=
; Billentyűzetről kér be két számot.
; Összeg, Különbség, Szorzat, Hányados, Maradék
; Képernyőre ÉS Ledsorra is.
START:
	MOV	DPTR,#OPER_EGY
	CALL	S_SOROS_TXT
	CALL	S_CRLF_KI
	CALL	S_ECHO
	MOV	V1,A
	CALL	S_CRLF_KI
	CALL	S_CRLF_KI
	
	MOV	DPTR,#OPER_KET
	CALL	S_SOROS_TXT
	CALL	S_CRLF_KI
	CALL	S_ECHO
	CALL	S_CRLF_KI
	MOV	V2,A
	CALL	S_CRLF_KI
	
	MOV	DPTR,#CIMKE_ADD
	CALL	S_SOROS_TXT
	CALL	S_CRLF_KI
	MOV	A,V1
	ADD	A,V2
	CALL	S_DEC_KI
	CALL	S_CRLF_KI
	CALL	S_CRLF_KI
	
	MOV	DPTR,#CIMKE_SUB
	CALL	S_SOROS_TXT
	CALL	S_CRLF_KI
	MOV	A,V1
	CLR	C
	SUBB	A,V2
	CALL	S_DEC_KI
	CALL	S_CRLF_KI
	CALL	S_CRLF_KI
	
	MOV	DPTR,#CIMKE_MUL
	CALL	S_SOROS_TXT
	CALL	S_CRLF_KI
	MOV	A,V1
	MOV	B,V2
	MUL	AB
	PUSH	ACC
	MOV	A,B
	CALL	S_DEC_KI
	POP	ACC
	CALL	S_DEC_KI
	CALL	S_CRLF_KI
	CALL	S_CRLF_KI
	
	MOV	DPTR,#CIMKE_DIV_1
	CALL	S_SOROS_TXT
	CALL	S_CRLF_KI
	MOV	A,V1
	MOV	B,V2
	DIV	AB
	CALL	S_DEC_KI
	CALL	S_CRLF_KI
	MOV	DPTR,#CIMKE_DIV_2
	CALL	S_SOROS_TXT
	CALL	S_CRLF_KI
	MOV	A,B
	CALL	S_DEC_KI
	CALL	S_CRLF_KI
	CALL	S_CRLF_KI
	CALL	S_CRLF_KI
	JMP	START

=2=
;Kiírja a NEV szöveget.
START:
	CALL	S_SOROS_TXT
	CALL	S_BIL_VAR_ENTER
	JMP	START

=3=
;
UJRA:	
	RR 	A
	CALL 	S_LED
	CALL 	DELAY
	JMP 	UJRA

=4=
;F =(A + Bnem) * C + D * Anem
L_UJRA:	
	CALL 	S_KLAV
	MOV 	C, ACC.0
	ORL 	C,/ACC.1
	ANL 	C, ACC.2
	MOV 	F0,C 		;MENTÉS
	MOV 	C, ACC.3
	ANL 	C, /ACC.0
	ORL 	C, F0 		;összeadás
	JC 	L_FULL
	CLR 	A
	JMP 	L_KIJEL

=5=
;számot olvas be, majd ír ki.
START:
	CALL	S_ECHO
	JMP	START

=6=
;1-es gomb ad, 2-es töröl, hármas csökkent:
L_UJRA:	
	CALL 	S_KLAWE
	
	MOV 	R3,A
	XRL 	A,#1
	JZ 	L_NOVEL
	
	MOV 	A,R3
	XRL 	A,#2
	JZ 	L_TOROL
	
	MOV 	A,R3
	XRL 	A,#4
	JZ 	L_CSOKK
	
	JMP 	L_UJRA
	INC 	R2
	MOV 	A,R2
	CALL 	S_LED
	JMP 	L_UJRA

=7=
;Kézi léptetés
UJRA:	
	CALL 	S_KLAWE
;ha szeretnéd, hogy csak az első gombra menjen, akkor kell még ez a két sor
	XRL 	A, #1
	JNZ 	UJRA
;ha szeretnéd, hogy a kettes töröljön:
	INC 	R2
	MOV 	A,R2
	CALL 	S_LED
	JMP 	UJRA

=8=
;Utolsó labor 1. feladata. GOMBOK SZÁMOLÁSA LED JELZÉSSEL ÉS SZOFTVERBEN  SZÁMOKKALEGYARÁNT:
FOPROG:
	MOV	R2,#0
	MOV	R3,#8
	MOV	DPTR,#0C000H
	CALL	S_KLAV
CIKLUS_1:
	RRC	A
	JNC	NEMJO
	INC	R2
NEMJO:
	DJNZ	R3,CIKLUS_1
	MOV	A,R2
	MOV	DPTR,#0C001H
	CALL	S_LED
	ADD	A,#30H
	CALL	S_SOROS_KI
	MOV	A,#0DH
	CALL	S_SOROS_KI
	JMP	FOPROG

=9=
;billentyűn gombkombináció. 1 ahol megnyomom, 0 ahol nem; soros vonalon írja ki, hogy hány db gombot nyomtam ki
L_MAIN:
	MOV 	R5,#8
	MOV 	R3,#0
	CALL 	S_KLAV
L_CIK:	
	RLC 	A
	INC 	L_AT1	;vigyázz, ilyen programnév már van S_KLAWnál. Nevezd át, ha a kettőt használod.
	INC 	R3

L_AT1:	
	DJNZ 	R5,L_CIK
	MOV 	A,R3
	CALL 	S_LED
	ADD 	A, #30H
	CALL 	S_SOROS_KI
	MOV 	A, #0DH
	CALL 	S_SOROS_KI
	JMP 	L_MAIN

=10=
;Utolsó Program 2.feladat. Binárisan számol felfelé, gombra megszakad. S_LED a =11= alján van, utána van L_FOPR
L_MAIN:
	LJMP 	L_KEZD
	DS 	08
L_TMR0LT:
	;PUSH 	ACC
	MOV 	TH0, #03CH 	;EZT SZÁMOLTUK: 15535=3CAF -> 50 MSEC
	MOV 	TL0, #0AFH
	INC 	R5		;MINDEN 50 MSEC-AL MEGNÖVELI AZ ÉRTÉKÉT
	MOV 	A, R5
	CJNE 	A, #20, L_VEG
	MOV 	R5, #0
	INC 	R6
	MOV 	A, R6
	CALL 	S_LED
L_VEG:	
	;POP 	ACC
	RETI
	
L_KEZD: 
L_INI_TMR0:			;MEGŐRZI A T0-N AZ ELSŐ HÁROM BITET, A NEGYEDIKRE BERAK EGY BITET, HOGY MODE1-BEN LEGYEN
	ANL 	TMOD, #0F0H
	ORL 	TMOD, #1
	SETB 	TR0
	MOV 	R5,#0 		; 50MSEC SZÁMLÁLÓ
	MOV 	R6, #0 		; SEC SZÁMLÁLÓ
L_INI_IT:
	SETB 	ET0
	SETA 	EA		;Lehet SETB?
L_FOPR:				;
	JMP 	$
L_FOPR:	 			;MÁSHOGYAN
	CALL 	S_KLAV
	JZ 	L_FOPR
	MOV 	R6, #0
	MOV 	R5, #0
	JMP 	L_FOPR

=11=
;Utolsó labor 3. FELADAT: MEGSZAKÍTJA A SZÁMLÁLÓT, ÉS KEZDI ELŐRŐL. EZ MŰKÖDIK ;CSEG AT 4000H
L_MAIN:	
	LJMP	L_KEZD
	DS	08
L_TMR0IT:
	PUSH	ACC
	MOV	TH0,#03CH
	MOV	TL0,#0AFH
	INC	R5
	MOV	A,R5
	CJNE	A,#20,L_VEG
	MOV	R5,#0
	INC	R6
	MOV	A,R6
	CALL	S_LED
L_VEG:	
	POP 	ACC
	RETI
	
L_KEZD:
L_INI_TMR0:
	ANL	TMOD,#0F0H
	ORL	TMOD,#1
	SETB	TR0
	MOV	R5,#0		;50 MS SZAMLALO
	MOV	R6,#0		;SEC SZAMLALO
L_INI_IT:
	SETB	ET0
	SETB	EA
	
L_FOPR:	CALL 	S_KLAV
	JZ 	L_FOPR
	MOV 	R6, #0
	MOV	A,R6
	CALL	S_LED	
	MOV 	R5, #0
	JMP 	L_FOPR
S_LED:				;Egy kicsit más az eredetihez képest, azért hagytam meg.
	MOV DPTR,#0C001H
	CPL A
	MOVX @DPTR,A
	CPL A
	RET
	
=12=
;Utolsó labor 4. FELADAT. S_LED a =11= szerint megint. ;CSEG AT 4000H. Rutinszerű Delay:
;A led kivillanása után ha lenyomod a gombot, kiírja mennyi idő telt el a felvillanástól a gomb lenyomásáig.
L_MAIN:	
	LJMP	L_KEZD
	DS	08
L_TMR0IT:
	PUSH	ACC
	MOV	TH0,#03CH
	MOV	TL0,#0AFH
	INC	R5
L_VEG:	
	POP 	ACC
	RETI

L_KEZD:
L_INI_TMR0:
	ANL	TMOD,#0F0H
	ORL	TMOD,#1
	SETB	TR0
	MOV	R5,#0		;50 MS SZAMLALO
	MOV	R6,#0		;SEC SZAMLALO
L_INI_IT:
	SETB	ET0
	SETB	EA
L_FOPR:	
	CALL 	S_DELAY
	MOV 	A, #255
	CALL	S_LED	
	MOV 	R5, #0
L_VAR:	
	CALL	S_KLAV
	JZ	L_VAR
	MOV	A, R5
	CALL	S_LED
	CALL	S_DELAY
	JMP	L_FOPR
	


------------------------------------And I'm in the zone.
=====TÁBlÁZAT/SZÖVEG=====

OPER_EGY:	DB	'Kerem az elso operandust',0
OPER_KET:	DB	'Kerem a masodik operandust',0
CIMKE_ADD:	DB	'Osszeg:',0
CIMKE_SUB:	DB	'Kulonbseg:',0
CIMKE_MUL:	DB	'Szorzat:',0
CIMKE_DIV_1:	DB	'Hanyados:',0
CIMKE_DIV_2:	DB	'Maradek:',0
NEV:		DB	'Mw',0,'Space, Milky Way, Mars',0,'Space kitten',0 ;DPTR erre van állítva.

=====SZUBRUTIN GYŰJTEMÉNY=====

;egy példa a delayre. Ez 1 mp.
S_DELAY:
	MOV	R2,#244
	MOV	R3,#1
	MOV	R4,#8
	DJNZ	R2,$
	DJNZ	R3,$-2
	DJNZ	R4,$-4
	RET

;akármilyen gombnyomásra vár, A-ba ír.
S_BIL_VAR:
        CALL	 S_SOROS_BE
        JZ  	 S_BIL_VAR
        RET
	
;enterre vár, A-ba ír.
S_BIL_VAR_ENTER:
        CALL	S_BIL_VAR
        XRL	A,#0DH
        JNZ	S_BIL_VAR_ENTER
        CALL	S_CRLF_KI		;
        RET

;új sor és soreleje. A megmarad
S_CRLF_KI:
	;PUSH	ACC
	MOV	A,#0DH
	CALL	S_SOROS_KI
	MOV	A,#0AH
	CALL	S_SOROS_KI
	;POP	ACC
	RET

;erteket olvas soros vonalrol decimalisan 0-255. A-ba olvas, B R2 megmarad, C torlodik
S_DEC_BE:
	;PUSH	B
	;MOV	B,R2
	;PUSH	B
	CALL	S_SOROS_BE
	CLR	C
	SUBB	A,#30H
	MOV	B,#100
	MUL	AB
	MOV	R2,A
	CALL	S_SOROS_BE
	CLR	C
	SUBB	A,#30H
	MOV	B,#10
	MUL	AB
	ADD	A,R2
	MOV	R2,A
	CALL	S_SOROS_BE
	CLR	C
	SUBB	A,#30H
	ADD	A,R2
	;POP	B
	;MOV	R2,B
	;POP	B
	RET
	
;erteket kuld soros vonalra decimalisan 0-255. A-bol ir, A B megmarad
S_DEC_KI:	
	PUSH	ACC
	;PUSH	B
	MOV	B,#100
	DIV	AB
	ADD	A,#30H
	CALL	S_SOROS_KI
	MOV	A,B
	MOV	B,#10
	DIV	AB
	ADD	A,#30H
	CALL	S_SOROS_KI
	MOV	A,B
	ADD	A,#30H
	CALL	S_SOROS_KI
	;POP	B
	POP	ACC
	RET

;erteket olvas soros vonalrol, majd vissza is kuldi. A-ba olvas
S_ECHO:		
	CALL	S_DEC_BE
	CALL	S_DEC_KI
	RET

;gombokat olvas. A-ba ir, DPTR valtozik
S_KLAV:
	MOV	DPTR,#0C000H
	MOVX	A,@DPTR
	CPL	A
	RET

;gombokat olvas, és vár ha nem nyomtam semmit. A-ba ir, DPTR valtozik
S_KLAW:
	CALL	S_KLAV
	CJNE	A,#00H,L_AT1
	JMP	S_KLAW
L_AT1:	
	RET
	
;gombot olvas, vár amíg nem nyomok semmit, és akkor megy tovább ha elengedem. A-ba ir, DPTR valtozik
S_KLAWE:
	CALL	S_KLAW
	PUSH	ACC
L_UJ1:
	MOVX	A,@DPTR
	CJNE	A,0FFH,L_UJ1
	POP	ACC
	RET
	
;ledeket felvillant. A-ból ír, DPTR változik.
S_LED:
	CPL	A
	MOV	DPTR,#0C001H
	MOVX	@DPTR,A
	RET

;Soros vonalból olvas az aksiba
S_SOROS_BE:
	JNB	RI,S_SOROS_BE
	CLR	RI
	MOV	A,SBUF
	RET

;Soros vonalra írja ki az aksit
S_SOROS_KI:
	JNB	TI,S_SOROS_KI
	CLR	TI
	MOV	SBUF,A
	RET

;stringet kuld ki soros vonalon zarobitig. A-t torli, DPTR-t inicializalni kell a szoveg cimere
S_SOROS_TXT:
	CLR	A
	MOVC	A,@A+DPTR
	INC	DPTR
	JZ	ZAROBIT
	CALL	S_SOROS_KI
	JMP	S_SOROS_TXT
ZAROBIT:
	RET
	
L_NOVEL:
	INC 	R2
	JMP 	L_KIJEL
	
L_TOROL:
	MOV 	R2, #0
	JMP 	L_KIJEL
	
L_CSOKK:
	DEC 	R2
	JMP 	L_KIJEL

L_FULL: 
	MOV 	A, #0FFH
	
L_KIJEL:
	CALL 	S_LED
	JMP 	L_UJRA



END
