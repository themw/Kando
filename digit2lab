                   ;,_            ,
                  _uP~"b          d"u,
                 dP'   "b       ,d"  "o
                d"    , `b     d"'    "b
               l] [    " `l,  d"       lb
               Ol ?     "  "b`"=uoqo,_  "l
             ,dBb "b        "b,    `"~~TObup,_
           ,d" (db.`"         ""     "tbc,_ `~"Yuu,_
         .d" l`T'  '=                      ~     `""Yu,
       ,dO` gP,                           `u,   b,_  "b7
      d?' ,d" l,                           `"b,_ `~b  "1
    ,8i' dl   `l                 ,ggQOV",dbgq,._"  `l  lb
   .df' (O,    "             ,ggQY"~  , @@@@@d"bd~  `b "1
  .df'   `"           -=@QgpOY""     (b  @@@@P db    `Lp"b,
 .d(                  _               "ko "=d_,Q`  ,_  "  "b,
 Ql         .         `"qo,._          "tQo,_`""bo ;tb,    `"b,
(qQ         |L           ~"QQQgggc,_.,dObc,opooO  `"~~";.   __,7,
`qp         t\io,_           `~"TOOggQV""""        _,dg,_ =PIQHib.
 `qp        `Q["tQQQo,_                          ,pl{QOP"'   7AFR`
   `         `tb  '""tQQQg,_             p" "b   `       .;-.`Vl'
              "Yb      `"tQOOo,__    _,edb    ` .__   /`/'|  |b;=;.__
                            `"tQQQOOOOP""        `"\QV;qQObob"`-._`\_~~-._
                                 """"    ._        /   | |oP"\_   ~\ ~\_  ~\
                                         `~"\ic,qggddOOP"|  |  ~\   `\  ~-._
                                           ,qP`"""|"   | `\ `;   `\   `\
                                _        _,p"     |    |   `\`;    |    |
                                 "boo,._dP"       `\_  `\    `\|   `\   ;
                                  `"7tY~'            `\  `\    `|_   |
                                                           `~\  |
"Féléves órai anyag/pótmérés/önálló mérés kidolgozás a Digitális technika 2 laboratórium harcosainak.
-Akik valamelyik bizonyos automatikára menn(én)ek tovább, azoknak illene csak ellenőrzésnek használni.
-A pontosságot nem tudom garantálni. Errlogot szívesen fogadok a mappán belül. 
Adtak egy ilyet: http://cl.ly/0s2p1Y0L2H1Q
Hallgass pimpes zenét: https://youtu.be/2RFz44C5P4w
		       https://youtu.be/48f26CeT710
Megjegyzés tökfejeknek: H: hexadecimális. D: decimális (nem kell kiírni, mert mindig ez az alapeset). B: bináris.
Licensz: Beerware"
.űrcica

=====MÉRÉSPÓTLÁS=====
; Dr Kónya László opensource feladatkiírása. Feltétel az önálló labor elkezdéséhez. 

1. Számolás:
223H= ???B
M: 	1000100011B

2. Számolás:
a, 43H XOR 52H= ???H
M: 	11H

b, 67H AND 32H= ???H
M: 	22H

c, 67H OR 32H= ???H
M: 	77H

3. 13H * 45H= ???H
M: 	51FH

4. Számolás:
a, 1041D= ???H
M: 	411H

b, 3A1H= ???D
M: 	3A1H

5. Program: Töltse fel az akkumulátort 182 (D) értékkel, majd az akku tartalmát DIREKT vigye az 55H című adatregiszterbe, illetve az 56H-ba INDIREKT.
M:	MOV	A, #182		;Aksi feltöltése magával az értékkel
	MOV	55H, A		;Így néz ki a direkt címzés 55H-ba.
	MOV	R0, #56H	;Indirekt címzés lehetséges R0-val vagy R1-el.
	MOV	@R0, A		;Így néz ki az indirekt címzés 56H-ba.

6. Program: 0FFH értékkel egy ciklus felhasználásával 20H címtől kezdődően feltöltünk 60 darab regisztert.
M:	MOV	R6, #60		;60-as számot R6-ba másoljuk.
	MOV	R0, #20H	;20H számot az R0-ba.
LOOP1:
	MOV	@R0, #0FFH	;Indirekt címzéssel eljuttatjuk a H számot az R0-ban levő hely értékére.
	INC	R0		;Növeljök R0-t, ezáltal mindig a következő címet kapjuk minden új ciklusban.
	DJNZ	R1, LOOP1	;Csökkenti R1 tartalmát, és visszaugrik a LOOP1 sorba. Amíg R1 nem 0.

7. Program: Másoljuk át 4000H-tól 5 bájtot a 60H-tól kezdődő belső adatmemória címekre.
M:	MOV	R6, #5		;R6-ba az ötös értéket.
	MOV	R1, #60H	;R1-be 60H értéket.
	MOV	DPTR, #400H	;Datapointerbe 400H érték.
LOOP2:
	MOVX	A,@DPTR		;DPTR-ben levő cím tartalmát az aksiba pakoljuk	külső RAM-ra mutató címből.	
	INC	DPTR		;a datapointer értékének növelése.
	INC	R1		;R1 értékének növelése
	DJNZ	R6, LOOP2	;Csökkenti R6 értékét amíg R6<>0 ÉS ugrik vissza a LOOP2-re.

8. Program: A kódmemória első 5 bájtját az adatmemória 70H-tól kezdődő címekre másoljuk át.
M:	MOV	R6, #5		;5D érték R6-ba
	MOV	R1, #70H	;70H megy R1-be
	MOV	DPTR, #2000H	;A kódmemória első bájtja 2000H-n van, akkor az lesz a datapointer értéke.
LOOP3:	
	MOV	A, #0		;A-t is beállítjuk 0-nak.
	MOVC	A, @A+DPTR	;Progmemből bemásoluk A és dptr értékeinek összegére mutató cím értékét.
	MOV	R1, A		;Elmentük R1 által mutatott helyre az értéket.
	INC	DPTR		;Növeljük a DPTR-t
	INC	R1		;R1-et is növeljük, mert nem akarjuk hogy állandóan felülírjon a ciklus egy cím értékét.
	DJNZ	R6, LOOP3	;Vált LOOP3 sorába, és csökkenti R6-ot, amíg nem 0.

9. Elmélet: Az MCS51-es mikrokontroller belső adatmemóriájának részei.
M: 	1. DATA:4 regiszterbank 00H-1FH, bitcímezhető memória terület 20H-2FH, bájtosan címezhető terület 30H-7FH. 
	2.1 IDATA: nincsenek kitüntetett részei, az egész bájtosan címezhető 80H-FFH
	2.2 SFR ennek minden 0-ra és 7-re végződő című bájtja bitcímezhető, a többi csak bájtosan 80H-FFH
 A 2.1 és 2.2 közötti váltást a direkt/indirekt címzés adja.

10. Elmélet: PSEN, RD, WR vezérlőjelek.
M:	PSEN:	Külső programmemória olvasását engedélyező jel
	RD:	Külső adatmemóriaolvasó jel.
	WR:	Külső adatmemóriaíró jel.

11. Elmélet: Mik az SFR regiszterek. Hol helyezkednek el, sorolj fel néhányat.
M:	Az SFR-ek speciális funkciójú regiszterek, a belső adatmermória 80H -tól FFH-ig tartó területén érhetőek el direkt címzéssel. Két fő típusa: 
A. perifériák által használt regiszterek
B. CPU által használt "Core" regiszterek pl. STATUS vagy megszakításkezelő regiszterek
Pl:	A  vagy ACC - AKKUMLÁTOR, 	B,	DPTR- DATAPOINTER 16 BITES


12. Elmélet: Mit csinál a következő utasítás: MOVC A, @A+DPTR
M: 	Bemásolja az A-ba a kódmemória azon  rekeszét, amelynek címe az A előző értéke és a DPTR összege.

13. Elmélet: Mutasd be a bitkezelő utasításokat.
M:	CLR 	C		;(CY)<=0	(megj: az utasításkészletben van az egész)
	SETB	C		;(CY)<=1
	CPL	C		;(CY)<=(CY)NEGALVA
	CLR 	<BIT>		;
	SETB	<BIT>		;
	CPL	<BIT>		;
	MOV	C,<BIT>		;bemásolja carrybe a bit tartalmát
	MOV	<BIT>,C		;
	ANL	C,<BIT>  	;ÉS kapcsolatba hozza a bitet a carryvel és az eredmény a carrybe kepződik
	ANL	C,/C<BIT> 	;ÉS kapcsolatba hozza  a bites valtozo tagadottjat es az eredmény a carrybe kepződik
	ORL	C,<BIT> 	;VAGY
	ORL	C,/<BIT>	;
				;BITEKNÉL XOR KAPCSOLAT NINCSEN

14. Elmélet: Hol helyezkedik el, és milyen 2 fő részből áll a bit-címezhető memória. Melyik memóriaterületen vannak a bitenként címezhető regiszterek.
M:	A belső adatmemóriában helyezkedik el , direkt és indirekt címzéssel érhető el. 20H-tól 2FH-ig (16byte) a bitcímezhető terület, valamint az SFR regiszter minden 8. bájtja. 
4 darab bitcímezhető regiszter van : BANK 0 címe: 00, BANK1 címe 01, BANK2címe 10,BANK3 címe 11     
a bítcímezhető regiszterek 00H-tól 1FH-ig helyezkednek el.

15. Elmélet: Miért és mikor kell a számok előtt # jelet használni. Mi a különbség " MOV A,3 " és " MOV A,#3 " között.
M:	Akkor kell használni a # jelet , ha Immediate Constant címzést alkalmazuk , azért  hogy az adott <cél> állományba , az adott konstans értéket másoljuk bele.
	MOV	A,#3 		;(A)<=3  KONSTANS 3 ÉRTÉKET MOZGAT A BA( KONSANTS CÍMZÉS)
	MOV 	A,3 		; (A)<=(3)	DIREKT BÁJTOT  MOZGAT A BA (DIREKT CÍMZÉS)


16. Elmélet: ACC=14H és B=23H. Mi lesz A és B tartalma H formában MUL AB után.
M:	A kettő szorzata 2BCH lesz, ez miatt B=02H és A=BCH

17. Elmélet: Mit tartalmaz a .HEX file, mire kell.
M:	A gépi kódot tartlalmazza hexadecimális formában. 

18. Elmélet: Mit tartalmaz és milyen formában egy program lista és egy hex formátumú fájlja?
M:	:10246200464C5549442050524F46494C4500464C33 		;Íme egy sor példának. Minden sora a hexnek kb. ilyen hányadék.
	|||||||||||                              CC->Checksum	;33 Ellenőrzőösszeg. A sort ellenőrzi, hogy volt-e hiba.
	|||||||||DD->Data					;464C-től 464C-ig maga az adat van.
	|||||||TT->Record Type					;00 típus. 00 az adatrekord.
	|||AAAA->Address					;2462 cím, ahol az adat lesz.
	|LL->Record Length					;10 adattípusok száma a felvételen belül
	:->Colon						;Minden rekord ezzel kezdődik.

19. Program: Ciklussal töltse fel 20H címtől 60 bájtot 0FFH értékkel.
M:	MOV	R6,#60		;R6 <-60D érték
	MOV	R1,#20H		;R1 <-20H érték
LOOP4:	
	MOV	@R1,#0FFH	;Indirekt címzés, R1 értékre mutatott címre rakja a #0FFH-t
	INC	R1		;Növeli R1-et
	DJNZ	R6,LOOP4	;Csökkenti R6-ot és ugrik a ciklus elejére, amíg R6 nem 0.

!20. Panel: Az alsó 3 nyomógombok legyenek bináris helyiértékek. Amelyik le van nyomva, annak a ledje világítson.
M:	
PROGR:	ANL 	A, #00000111B 
	CJNE 	A, #0, FOLYTAT
	MOV 	A, #1
	JMP VEGE
FOLYTAT:
	MOV 	R0, #00000001B
	MOV 	R6, A
	MOV 	A, R0
LOOP:	
	RL 	A 
	DJNZ 	R6, LOOP
VEGE:	
	NOP

!21. Elmélet: A 8051-es adatmemóriájának részletes felosztását rajzold le.
-//- 9

22. Program: Mi lesz A, B tartalma H alakban az alábbi program után:
M:	MOV     A, #12H		;A-ba teszi a 12H-t: 00010010B
	MOV     B, #34		;B-be teszi a 34D-t: 00100010B
	RL      A		;Rotálja A-t balra, lesz. 00010010B -> 00100100B
	SWAP    A		;Felcseréli a két hexa számot A-ban: 00100100B -> 01000010B
	SETB    ACC.5		;A-nak a 6. számjegyét 1-re állítja balróll. 01000010B -> 01100010B
	RR      A		;Jobbra rotálja A-t: 01100010B -> 00110001B
	MUL     AB		;=682H Így B=06H és A=82H

23. Program: A és B regiszterek tartalma H alakban az alábbi program után:
M:	MOV     A, #141		;A=141D
	MOV     B, #13H		;B=13H
	INC     A		;10001101 -> 10001110
	RL      A		;10001110 -> 00011101
	SWAP    A		;00011101 -> 11010001
	INC     A		;11010001 -> 11010010
	RR      A		;11010010 -> 01101001
	DIV     AB		;=A05H Így B=0AH és A=05H

24. Program: Külső adatmemória 100-as címétől 15 bájt feltöltése 0A5H értékellel, majd ezt másolni a belső adatmemória 50H címétől.
M:	MOV	R6,#15		;
	MOV	DPTR,#100	;
	MOV 	A,#0A5H		;
LOOP5:	
	MOVX	@DPTR,A		;
	INC	DPTR		;
	DJNZ	R6,LOOP5	;
	MOV	R3,#15		;
	MOV	R4,#50H		;
LOOP6:	
	CLR	A		;
	MOVX	A,@DPTR		;
	MOV	@R4,A		;
	INC	R4		;
	DEC	DPTR		;
	DJNZ	R3,LOOP6	;

25. Program: F = A * (B + /C) + A*B*C
M:	MOV 	F0, ACC.0	;Menti A-t.
	MOV 	C, ACC.1	;Beteszi C-be a B-t.
	ORL 	C, /ACC.2	;B + /C
	ANL	C, F0		;A * zárójel
	MOV 	F0,C 		;MENTÉS
	MOV 	C, ACC.0	;Beteszi A-t a C-be	
	ANL 	C, ACC.1	;A*B
	ANL 	C, ACC.2	;A*B*C
	ORL 	C, F0 		;összeadja a két tagot, eredmény a C-ben.

26. Elmélet: Mit jelent, ha egy szegmens relokálható:
M:	RSEG: Azt jelenti, hogy előre volt definiálva egy terület, amit betöltéskor újra meg lehet találni.

27. Elmélet: Bitcímeket alkalmazva, mi a 22H című regiszter 7. bitjének a bitcíme:
M:	17H.
	Mert 20H-tól kezdődik a bitcímzés. Egy regiszter 8-8 bitet tartalmaz, 8+8+7=23
	23 átváltva H-ra 17H. Illuminati confirmed?!

28. Elmélet: Milyen ugró utasítások használhatók bit operandussal:
M:	JB 	<bit>,<c.rel>;jump if bit , tetszőleges bitet vizsgálhatunk vele ha 1 értékű
	JNB	<bit>,<c.rel>;jump if not bit , akkor ugrik ha a bit 0
	JBC	<bit>,<c.rel>;jump bit and clear, akkor ugrik ha a bit 1 erteku es torli is a bitet


29. Program: Hogyan lehet szöveget kiíratni a képernyőre soros vonal közvetlen programozásával:
M:	SZOVEG: 	DB	'Ezt ird ki',0
;byteonkent olvassa be a forditoprogram  a karakterek  ascii  kodjat es elhelyezi  a memoriaba, majd onnan írja ki a soros vonalra , ha eljut a lezáró 0 karakterig , akkor befejezi a ciklust.
	MOV	R7,#0		;
	MOV	DPTR,#SZOVEG1	;
UJRA:
	MOV	A,R7		;
	MOVC	A,@A+DPTR	;
	JZ	VEG		;
ISM:
	JNB	TI,ISM		;
	CLR 	TI		;
	MOV	SBUF,A		;
	INC	R7		;
	JMP	UJRA		;
VEG:	..........	


30. Elmélet: Counter/timer modul (TCM) felépítése és üzemmódjai:
M:	Felépítés:		;Ez amúgy a 8051 Mikrokontroller alkalmazási segédletben megtalálható.
		Timer1	       |             Timer0		
|  Gate  |  C/T  |  M1  |  M0  |  Gate  |  C/T  |  M1  |  M0  |
	Üzemmódok:
| M1 | M0 |
  0    0        13 bites Timer
  0    1        16 bites Timer/Counter
  1    0        8 bites Auto-újratöltő Timer/Counter
  1    1        Split Timer Mode. Ezt nem használjuk, mert igényli a T1 regisztert, ami miatt nem lesz használható a soros port.
  
31. Elmélet: Melyek a soros perifériákhoz kapcsolódó regiszerek és bitek:
M:      Státusz bitek - RI,TI
        Az RS-232, full duplex szabvány értelmében a vételnél és az adásnál is az SBUF (azonos cím , de fizikailag két különböző SFR az adó és a vevő)bufferbe kerül az adat. T1es időzítő a soros átvitel Baud-Rate generátora

32. Elmélet: Melyek az időzítő modulokhoz kapcsolódó regiszerek és bitek. Mi a TF0 és a TR0 szerepe: 
M:      T1 es időzítő  a soros átvitel Baud-Rate generátora, csak a T0 időzítőt alkalmaztuk a mérési feladatokban. Az ütemmód beállítás a TMOD SFR- ben történik, csak bájtosan írható , olvasható , ezért figyelnünk , kell , hogy a felső 4 bitet ne változtassuk meg. Az üzemmód beállítását maszkolással tudjuk elvégezni. TCON regiszterben vannak a T0,T1 vezérlő és státusz bitjei ezek a bitek a "SETB bit" , "CLEAR bit" utasításokkal egyenként törölhetőek vagy beírhatóak. A TF0 bit egy megszakítást kérő bit: T0 számláló túlcsordulásba 1-be írja a TF0 bitet. TR0 bit  a Timer\Counter0 futását vezérlő bit. Ha értéke 1 indítja ,ha 0 leállítja a Timer\Counter0.

33. Elmélet: Melyek a megszakításokhoz kapcsolódó regiszterek és bitek. Mi az EA bit szerepe:
M:      A mikrokontroller család megszakításai fix címűek.
        Egy megszakítás elfogadása utána a CPU a rutint az adott megszakításhoz tartozó címen hívja
        A TF0 bit egy megszakítást kérő bit: T0 számláló túlcsordulásba 1-be írja a TF0 bitet.
        A megszakítás feltétele , hogy a megfelelő engedélyező maszk bit értéke 1 legyen.
        A megszakítást engedélyező bitek az IEN0- interrupt enable SFR ben vannak : EA általános engedélyező bit a többi az egyes megszakításokhoz tartozó maszk bitek pl. T0-hoz ET0.
        Megszakítás akkor jön létre , ha a forrás megszakítást kér és EA , illetve a megfelelő maszk bit is 1 értékű.
	Megszakítás kérés esetén a magasabb priorítású megszakítás kérést szolgálja ki a kontroller.
	A sorrend az IP0 priorítás vezérlő regiszerben módosítható.


=====ÖNÁLLÓ MÉRÉS=====

1. Alakítsa át az A regiszterben lévő bájtot bináris alakú karaktersorozattá, és tárolja el az IDATA memória 40H címétől kezdődő nyolc szomszédos helyén, és először a legmagasabb helyi érték szerepeljen! Az eredményt írja ki a soros vonalra karakteresen, és a végén küldjön egy- kocsi vissza — soremelést is! (Folyamatábra, kommentezés!) 
M:
PROG SEGMENT CODE
RSEG PROG
L_UJRA:
	MOV 	R0,#40H
	MOV 	R7,#8		;ISMETLES 7 SZER. ASCII KÓD=SZÁM+30H
ISM:	
	RLC 	A
	JNC 	UGRAS
	MOV 	@R0,#31H
TOV:	
	INC 	R0
	DJNZ 	R7,ISM
	JMP 	L_UJRA
UGRAS:
	MOV	@R0,#30H	
	JMP	TOV
END	

!2. Olvasson be a billentyűzeten megadott nyolc darab 0 és 1 álló karaktert a soros vonalon, és tárolja az IDATA memória 40H címétől kezdődően! Alakítsa át az IDATA memória 40H címétől kezdődő nyolc szomszédos helyén letárolt 0 és 1 karakterekből álló karaktersorozatot az A regiszterben lévő bináris értékké. Az eredményt írja vissza a képernyőre, decimálisan! Az első helyen a legmagasabb helyi érték szerepel. (Folyamatábra, kommentezés!) 
M:

3. Írjon programot, amely az A regiszterben lévő bájtot decimális karakterekké alakítva elhelyezi az IDATA memória három szomszédos helyén! Az eredményt küldje kí a soros vonalon! (bin -decimális - ASC konverzió) (Folyamatábra, kommentezés!) 
M:
PROG SEGMENT CODE
RSEG PROG
L_UJRA:
	MOV 	R0,#40H
	MOV 	B,#100
	DIV 	AB
	ADD 	A,#30H
	CALL 	MASOL
	MOV 	A,B
	MOV 	B,#10
	DIV 	AB
	ADD 	A,#30H
	CALL 	MASOL
	MOV 	A,B
	ADD 	A,#30H
	CALL 	MASOL
	JMP 	L_UJRA
MASOL:
	MOV 	@R0,A
	INC 	R0
	RET 	
END	

!4. Számolja meg és helyezze el az R3 regiszterbe az A regiszterben lévő 1 értékű bitek számát ASCII karakteres fog mában! Az eredményt küldje ki a soros vonalon! (Folyamatábra, kommentezés!) 


!5. Az IDATA memória 40H címén kezdődő 3 ASCII karaktert (mindegyike 0,1,...9) alakítsa át bináris értékké! (decimális ASC - bin konverzió) (Folyamatábra, kommentezés!) 


6. A billentyűport (COOOH) legkisebb helyi-értékein lévő három nyomógombot A, B, C bemenetként, a LED-port (C001 H} legkisebb helyiértékű kimeneti LED -et (F) tekintve, valósítsa meg a következő logikai függvényt: F=A*B*C (A LED akkor világít, ha mindhárom gombot nyomjuk.) illetve az F=A+B+C. (A LED akkor világít, ha bármelyik gombot nyomjuk). (Folyamatábra, kommentezés!) 
M:
PROG SEGMENT CODE
RSEG PROG
L_UJRA:
	CALL 	S_GOMBSOR_BE
	ANL 	A, #0FH		;MASZKOLJA LE A-T
	MOV 	C, ACC.0	;A
	ANL 	C, ACC.1	;AB
	ANL 	C, ACC.2	;ABC
	JNC 	HAMIS
IGAZ:	
	MOV	A, #01H
	CALL 	S_LED_KI
	JMP 	L_UJRA
HAMIS:	
	MOV 	A, #00H
	CALL 	S_LED_KI
	JMP 	L_UJRA
S_GOMBSOR_BE:
	MOV 	DPTR, #0C000H
	MOVX 	A, @DPTR
	CPL 	A
	RET
S_LED_KI:
	CPL 	A
	MOV 	DPTR,#0C001H
	MOVX 	@DPTR,A
	RET
END

!7. A billentyűport (0000H) legkisebb helyi-értékein lévő három nyomógombot A, B, C bemenetként, a LED-port (C001H) legkisebb helyi-értékű kimeneti LED -et (F) tekintve, valósítsa meg a kővetkező logikai függvényt: F=(/A*B)+B*C"/A (Folyamatábra, kommentezés!) 
M: 	MOV 	C,ACC.1 	;B-->C
	ORL 	C,/ACC2   	;B+/C
	ANL 	C,ACC.0   	;(B+/C)*A
	MOV 	F0,C      	;(B+/C)*A --->>F0
	MOV 	C,ACC.0    	;A--->C
	AN	C,ACC.1    	;A*B
	ANL 	C,ACC.2    	;A*B*C
	ORL 	C,F0    	;A*B*C+A*(B+/C)
	CL	A   
	RLC 	A
	CAL	S_LED
	JMP 	L_UJRA

8. Írjon programot, amely a gyakorló alsó öt helyiértékű nvomógombját (C000H cím) bináris értékként beolvassa, és egy táblázat segítségével az érték BCD kódját jeleníti meg a LED diódasoron! (pl: gomb=10011 (13H=19D, LED sor: 0001 1001 (19) (Folyamatábra, kommentezés!) 
M:
	MOV	A, #23		;Ez egy teszt. 23-vel próbáljuk meg.
	MOV	B, #10		;Ez egy tizes osztó lesz most
	DIV	AB		;Elosztjuk A-t 10-zel. 23 esetében A=2 B=3 
	SWAP	A		;02 -> 20
	ADD	A,B		;Összeadjuk. Így lesz 0010 0011B, ami 23H. Ami 23D BCD-ben, tehát jó.

VAGY-----Comma overdose

PROG SEGMENT CODE
RSEG PROG
L_MAIN:
L_INI:
L_CIKL:
	CALL	NGS_BE		;BEOLVASAS
	ANL	A,#31		;MASZKOLÁS ALSÓ ÖT BITRE
	mov	DPTR,#TABLA1	
	movc	A,@A+DPTR	;A-BA A TABLAZAT BEOLVASOTT SORSZAMU ELEMET
	CALL	LED_KI		;KIIRAS
	JMP 	L_CIKL
;--------------------------TABLAZATOK------------------------------------------
TABLA1:  
	DB	00H,01H,02H,03H,04H,05H,06H,07H,08H,09H,10H,11H,12H,13H,14H,15H
	DB	16H,17H,18H,19H,20H,21H,22H,23H,24H,25H,26H,27H,28H,29H,30H,31H
;----------------------------SZUBRUTINOK---------------------------------------
NGS_BE:
	MOV 	DPTR,#0C000H
	MOVX 	A,@DPTR
	CPL A
	RET
LED_KI:
	CPL 	A
	MOV 	DPTR,#0C001H
	MOVX 	@DPTR,A
	RET
END	
-----And I'm in the zone

!9. Írjon programot, amely egy futófényt állít elő a LED parton (0001H cím)! Késleltető hurok segítségével valósítsa meg a késleltetést. Számítsa ki a késleltetés idejét, és állítson be negyed másodperces ciklusidőt! (Folyamatábra, kommentezés!) 


!10. Készítsen programot, amely a billentyűport (cím: 0000H) legkisebb helyiértékén lévő nyomógomb nyomkodásával felfelé, a következő nyomógomb nyomkodásával lefelé számol! A harmadik nyomógomb megnyomása törli a számlálót! A 8 bites számláló aktuális állapotát a LED soron (C001 H) jelezze ki! (Folyamatábra, kommentezés!) 


11. Készítsen programot, amely a billentyűport (cím: COOOH) legkisebb három helyiértékén lévő nyomögomb kombinációnak megfelelő bináris értéket a LED sor (cím: 0001H) megfelelő LED-jének kigyújtásával kijelzi. (3-ból 8-ra dekódoló) (pl. bill.: 101, akkor az 5. led ég.) (Folyamatábra, kommentezés!) 
M:
PROG SEGMENT CODE
RSEG PROG
L_MAIN:
L_INI:
L_CIKL:
	CALL 	S_BILL_BE
	ANL 	A,#07H		;MASZKOLJA LE A-T
	MOV 	R7,A
	CLR 	A
	SETB	C
	INC	R7
SZAMOL:	
	RLC	ACC
	DJNZ	R7,SZAMOL
	CALL 	S_LED_KI
	JMP 	L_CIKL
S_BILL_BE:
	MOV 	DPTR,#0C000H
	MOVX 	A,@DPTR
	CPL 	A
	RET
S_LED_KI:
	CPL 	A
	MOV 	DPTR,#0C001H
	MOVX 	@DPTR,A
	RET	
END	

!12. Készítsen programot, amely a billentyűport (cím: COOOH) legkisebb helyi-értékén lévő nyomógomb nyomkodásával balra rotálja egy LED fényét a LED soron (0001H), azaz eu világító LED balra lépked. A következő nyomógomb nyomkodásával pedig jobbra rotál! (Folyamatábra, kommentezés!) 


!13. Írjon programot, amely a soros vonalon beküldött két decimális szám összegét, különbségét, szorzatát és hányadosát kiszámítja, és az eredményt a soros vonalon keresztül a képernyőn megjeleníti! (ADDC, SUBB, MUL, DIV utasítások). (Folyamatábra, kommentezés!) 


14. Készítsen elektronikus kódzárat: a billentyűport (cím: COOOH) legkisebb három helyi-értékén lévő nyomógomb (A, B és C gombok) öt, adott sorrendű megnyomása (és elengedése) hatására gyulladjon ki egy LED 5 másodpercig! (Folyamatábra, kommentezés!) 
M:
PROG SEGMENT CODE
RSEG PROG
L_INI:	MOV	R5,#5
	MOV	R6,#0
L_CIKL:	
	CALL	S_GOMBSOR_VAR
	MOV	R7,A
	CALL	VAR
	MOV	A,R6		;N AZ ACC-BE
	MOV	DPTR,#KOD
	MOVC	A,@A+DPTR	;N-EDIK KOD KIOLVASASA TABLAZATBOL
	CLR	C
	SUBB	A,R7		;TABLAZAT N-EDIK ELEME - BEOLVASOTT ÉRTÉK
	JNZ	L_INI		;HA NEM EGYEZIK UJRA KEZDES
	INC	R6
	DJNZ	R5,L_CIKL	;ISMETLES 4 SZER
	MOV	A,#01
	CALL	S_LEDSOR_KI
	JMP	$
;--------------------------TABLAZATOK------------------------------------------
KOD:	DB	2H,4H,2H,1H,4H	;MEGADOTT SORRENDŰ 5 SÁMJEGYBŐL ÁLLÓ KÓD
;----------------------------SZUBRUTINOK-------------------------------------
VAR: 
	CALL 	S_GOMBSOR_BE		;VARAKOZAS GOMB ELENGEDESERE
	JNZ 	VAR
	RET
S_GOMBSOR_VAR:				;VARAKOZAS GOMB BENYOMASARA
	CALL 	S_GOMBSOR_BE
	JZ 	s_GOMBSOR_VAR
	RET
S_GOMBSOR_BE:
	MOV 	DPTR,#0C000H
	MOVX 	A,@DPTR
	ANL	A,#7			;MASZKOLJA LE ALSO 3 GOMBRA
	CPL 	A
	RET
S_LEDSOR_KI:
	CPL 	A
	MOV 	DPTR,#0C001H
	MOVX 	@DPTR,A
	RET
END

=====ÓRAI ANYAG=====

===ELŐLAP===

PROG	SEGMENT	CODE		;Deklarálja a szegmenst PROG néven.
STACK	SEGMENT	IDATA		; -//- STACK néven.

V1	EQU	R3		;Definiálja az R3-at V1-nek.
V2	EQU	R4		; -//-

RSEG	STACK			;Kiválasztja a STACK szegmenst.
DS	16			;Ennyi bájtot foglal le a memóriaterületből.
RSEG	PROG			;Kiválasztja a PROG szegmenst.
	MOV	SP,#STACK-1	;Stack pointer beállítás
	MOV	DPTR,#NEV	;A pointerbe beállítja a NEV táblázat értékét.
	
===FŐCIKLUSOK===

=1=
; Billentyűzetről kér be két számot.
; Összeg, Különbség, Szorzat, Hányados, Maradék
; Képernyőre ÉS Ledsorra is.
START:
	MOV	DPTR,#OPER_EGY	;Kiíratja az OPER_EGY sor tartalmát
	CALL	S_SOROS_TXT	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	CALL	S_ECHO		;Ugrik erre a szubrutinra.
	MOV	V1,A		
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	
	MOV	DPTR,#OPER_KET
	CALL	S_SOROS_TXT	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	CALL	S_ECHO		;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	MOV	V2,A
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	
	MOV	DPTR,#CIMKE_ADD
	CALL	S_SOROS_TXT	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	MOV	A,V1
	ADD	A,V2
	CALL	S_DEC_KI	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	
	MOV	DPTR,#CIMKE_SUB
	CALL	S_SOROS_TXT	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	MOV	A,V1		
	CLR	C		
	SUBB	A,V2		
	CALL	S_DEC_KI	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	
	MOV	DPTR,#CIMKE_MUL
	CALL	S_SOROS_TXT	
	CALL	S_CRLF_KI	
	MOV	A,V1		
	MOV	B,V2		
	MUL	AB		
	PUSH	ACC		
	MOV	A,B		
	CALL	S_DEC_KI	
	POP	ACC		
	CALL	S_DEC_KI	
	CALL	S_CRLF_KI	
	CALL	S_CRLF_KI	
	
	MOV	DPTR,#CIMKE_DIV_1	
	CALL	S_SOROS_TXT	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	MOV	A,V1
	MOV	B,V2
	DIV	AB
	CALL	S_DEC_KI	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	MOV	DPTR,#CIMKE_DIV_2
	CALL	S_SOROS_TXT	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	MOV	A,B
	CALL	S_DEC_KI	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
	JMP	START

=2=
;Kiírja a NEV szöveget.
START:
	CALL	S_SOROS_TXT
	CALL	S_BIL_VAR_ENTER
	JMP	START

=3=
;
UJRA:	
	RR 	A
	CALL 	S_LED
	CALL 	DELAY
	JMP 	UJRA

=4=
;F =(A + Bnem) * C + D * Anem
L_UJRA:	
	CALL 	S_KLAV
	MOV 	C, ACC.0
	ORL 	C,/ACC.1
	ANL 	C, ACC.2
	MOV 	F0,C 		;MENTÉS
	MOV 	C, ACC.3
	ANL 	C, /ACC.0
	ORL 	C, F0 		;összeadás
	JC 	L_FULL
	CLR 	A
	JMP 	L_KIJEL

=5=
;számot olvas be, majd ír ki.
START:
	CALL	S_ECHO
	JMP	START

=6=
;1-es gomb ad, 2-es töröl, hármas csökkent:
L_UJRA:	
	CALL 	S_KLAWE
	
	MOV 	R3,A
	XRL 	A,#1
	JZ 	L_NOVEL
	
	MOV 	A,R3
	XRL 	A,#2
	JZ 	L_TOROL
	
	MOV 	A,R3
	XRL 	A,#4
	JZ 	L_CSOKK
	
	JMP 	L_UJRA
	INC 	R2
	MOV 	A,R2
	CALL 	S_LED
	JMP 	L_UJRA

=7=
;Kézi léptetés
UJRA:	
	CALL 	S_KLAWE
;ha szeretnéd, hogy csak az első gombra menjen, akkor kell még ez a két sor
	XRL 	A, #1
	JNZ 	UJRA
;ha szeretnéd, hogy a kettes töröljön:
	INC 	R2
	MOV 	A,R2
	CALL 	S_LED
	JMP 	UJRA

=8=
;Utolsó labor 1. feladata. GOMBOK SZÁMOLÁSA LED JELZÉSSEL ÉS SZOFTVERBEN  SZÁMOKKALEGYARÁNT:
FOPROG:
	MOV	R2,#0
	MOV	R3,#8
	MOV	DPTR,#0C000H
	CALL	S_KLAV
CIKLUS_1:
	RRC	A
	JNC	NEMJO
	INC	R2
NEMJO:
	DJNZ	R3,CIKLUS_1
	MOV	A,R2
	MOV	DPTR,#0C001H
	CALL	S_LED
	ADD	A,#30H
	CALL	S_SOROS_KI
	MOV	A,#0DH
	CALL	S_SOROS_KI
	JMP	FOPROG

=9=
;billentyűn gombkombináció. 1 ahol megnyomom, 0 ahol nem; soros vonalon írja ki, hogy hány db gombot nyomtam ki
L_MAIN:
	MOV 	R5,#8
	MOV 	R3,#0
	CALL 	S_KLAV
L_CIK:	
	RLC 	A
	INC 	L_AT1	;vigyázz, ilyen programnév már van S_KLAWnál. Nevezd át, ha a kettőt használod.
	INC 	R3

L_AT1:	
	DJNZ 	R5,L_CIK
	MOV 	A,R3
	CALL 	S_LED
	ADD 	A, #30H
	CALL 	S_SOROS_KI
	MOV 	A, #0DH
	CALL 	S_SOROS_KI
	JMP 	L_MAIN

=10=
;Utolsó Program 2.feladat. Binárisan számol felfelé, gombra megszakad. S_LED a =11= alján van, utána van L_FOPR
L_MAIN:
	LJMP 	L_KEZD
	DS 	08
L_TMR0LT:
	;PUSH 	ACC
	MOV 	TH0, #03CH 	;EZT SZÁMOLTUK: 15535=3CAF -> 50 MSEC
	MOV 	TL0, #0AFH
	INC 	R5		;MINDEN 50 MSEC-AL MEGNÖVELI AZ ÉRTÉKÉT
	MOV 	A, R5
	CJNE 	A, #20, L_VEG
	MOV 	R5, #0
	INC 	R6
	MOV 	A, R6
	CALL 	S_LED
L_VEG:	
	;POP 	ACC
	RETI
	
L_KEZD: 
L_INI_TMR0:			;MEGŐRZI A T0-N AZ ELSŐ HÁROM BITET, A NEGYEDIKRE BERAK EGY BITET, HOGY MODE1-BEN LEGYEN
	ANL 	TMOD, #0F0H
	ORL 	TMOD, #1
	SETB 	TR0
	MOV 	R5,#0 		; 50MSEC SZÁMLÁLÓ
	MOV 	R6, #0 		; SEC SZÁMLÁLÓ
L_INI_IT:
	SETB 	ET0
	SETA 	EA		;Lehet SETB?
L_FOPR:				;
	JMP 	$
L_FOPR:	 			;MÁSHOGYAN
	CALL 	S_KLAV
	JZ 	L_FOPR
	MOV 	R6, #0
	MOV 	R5, #0
	JMP 	L_FOPR

=11=
;Utolsó labor 3. FELADAT: MEGSZAKÍTJA A SZÁMLÁLÓT, ÉS KEZDI ELŐRŐL. EZ MŰKÖDIK ;CSEG AT 4000H
L_MAIN:	
	LJMP	L_KEZD
	DS	08
L_TMR0IT:
	PUSH	ACC
	MOV	TH0,#03CH
	MOV	TL0,#0AFH
	INC	R5
	MOV	A,R5
	CJNE	A,#20,L_VEG
	MOV	R5,#0
	INC	R6
	MOV	A,R6
	CALL	S_LED
L_VEG:	
	POP 	ACC
	RETI
	
L_KEZD:
L_INI_TMR0:
	ANL	TMOD,#0F0H
	ORL	TMOD,#1
	SETB	TR0
	MOV	R5,#0		;50 MS SZAMLALO
	MOV	R6,#0		;SEC SZAMLALO
L_INI_IT:
	SETB	ET0
	SETB	EA
	
L_FOPR:	CALL 	S_KLAV
	JZ 	L_FOPR
	MOV 	R6, #0
	MOV	A,R6
	CALL	S_LED	
	MOV 	R5, #0
	JMP 	L_FOPR
S_LED:				;Egy kicsit más az eredetihez képest, azért hagytam meg.
	MOV DPTR,#0C001H
	CPL A
	MOVX @DPTR,A
	CPL A
	RET
	
=12=
;Utolsó labor 4. FELADAT. S_LED a =11= szerint megint. ;CSEG AT 4000H. Rutinszerű Delay:
;A led kivillanása után ha lenyomod a gombot, kiírja mennyi idő telt el a felvillanástól a gomb lenyomásáig.
L_MAIN:	
	LJMP	L_KEZD
	DS	08
L_TMR0IT:
	PUSH	ACC
	MOV	TH0,#03CH
	MOV	TL0,#0AFH
	INC	R5
L_VEG:	
	POP 	ACC
	RETI

L_KEZD:
L_INI_TMR0:
	ANL	TMOD,#0F0H
	ORL	TMOD,#1
	SETB	TR0
	MOV	R5,#0		;50 MS SZAMLALO
	MOV	R6,#0		;SEC SZAMLALO
L_INI_IT:
	SETB	ET0
	SETB	EA
L_FOPR:	
	CALL 	S_DELAY
	MOV 	A, #255
	CALL	S_LED	
	MOV 	R5, #0
L_VAR:	
	CALL	S_KLAV
	JZ	L_VAR
	MOV	A, R5
	CALL	S_LED
	CALL	S_DELAY
	JMP	L_FOPR
	

=====TÁBlÁZAT/SZÖVEG=====

OPER_EGY:	DB	'Kerem az elso operandust',0
OPER_KET:	DB	'Kerem a masodik operandust',0
CIMKE_ADD:	DB	'Osszeg:',0
CIMKE_SUB:	DB	'Kulonbseg:',0
CIMKE_MUL:	DB	'Szorzat:',0
CIMKE_DIV_1:	DB	'Hanyados:',0
CIMKE_DIV_2:	DB	'Maradek:',0
NEV:		DB	'Mw',0,'Space, Milky Way, Mars',0,'Space kitten',0 ;DPTR erre van állítva.

=====SZUBRUTIN GYŰJTEMÉNY=====

;egy példa a delayre. Ez 1 mp.
S_DELAY:
	MOV	R2,#244		;Ezt azért nem dokumentálom, mert generáljató a programon belül.
	MOV	R3,#1		;Ja, és figyelj arra, hogy ne használj R2-3-4,et, mert az át fog állítódni.
	MOV	R4,#8		;
	DJNZ	R2,$		;
	DJNZ	R3,$-2		;
	DJNZ	R4,$-4		;
	RET			;Visszaugrik oda, ahonnét meghívták.

;akármilyen gombnyomásra vár, A-ba ír.
S_BIL_VAR:
        CALL	 S_SOROS_BE	;Ugrik erre a szubrutinra.
        JZ  	 S_BIL_VAR	;Ha A=0, akkor ugrik erre a szubrutinra.
        RET			;Visszaugrik oda, ahonnét meghívták.
	
;enterre vár, A-ba ír.
S_BIL_VAR_ENTER:
        CALL	S_BIL_VAR	;Ugrik erre a szubrutinra.
        XRL	A,#0DH		;A XOR 1101B
        JNZ	S_BIL_VAR_ENTER	;Ha A <> 0 akkor ugrik erre a szubrutinra.
        CALL	S_CRLF_KI	;Ugrik erre a szubrutinra.
        RET			;Visszaugrik oda, ahonnét meghívták.

;új sor és soreleje. A megmarad
S_CRLF_KI:
	;PUSH	ACC		;Lementi A értékét a verembe
	MOV	A,#0DH		;A=0DH
	CALL	S_SOROS_KI	;Ugrik erre a szubrutinra. Viszi magával A-t
	MOV	A,#0AH		;A=0AH
	CALL	S_SOROS_KI	;Ugrik erre a szubrutinra. Viszi magával A-t
	;POP	ACC		;Visszaveszi A eredeti értékét
	RET			;Visszaugrik oda, ahonnét meghívták.

;erteket olvas soros vonalrol decimalisan 0-255. A-ba olvas, B R2 megmarad, C torlodik
S_DEC_BE:
	;PUSH	B		;B első értékét verembe helyezi.
	;MOV	B,R2		;R2 -> B
	;PUSH	B		;B második értékét a verembe helyezi.
	CALL	S_SOROS_BE	;Ugrik erre a szubrutinra.
	CLR	C		;Törli a Carryt
	SUBB	A,#30H		;A=A-30H-C ahol most C=0
	MOV	B,#100		;B=100
	MUL	AB		;A*B, eleje B-ben, vége A-ban
	MOV	R2,A		;A= (R2)
	CALL	S_SOROS_BE	;Ugrik erre a szubrutinra.
	CLR	C		;Törli a Carryt
	SUBB	A,#30H		;A=A-30H-C ahol most C=0
	MOV	B,#10		;B=10H
	MUL	AB		;A*B, eleje B-ben, vége A-ban
	ADD	A,R2		;A=A+R2
	MOV	R2,A		;A -> R2
	CALL	S_SOROS_BE	;Ugrik erre a szubrutinra.
	CLR	C		;Törli a Carryt
	SUBB	A,#30H		;A=A-30H-C ahol most C=0
	ADD	A,R2		;R2 -> A
	;POP	B		;Felszabadítja B második értékét
	;MOV	R2,B		;Elmenti B-t R2-be
	;POP	B		;Visszaveszi B eredeti értékét
	RET			;Visszaugrik oda, ahonnét meghívták.
	
;erteket kuld soros vonalra decimalisan 0-255. A-bol ir, A B megmarad
S_DEC_KI:	
	PUSH	ACC		;A értékét betolja a verembe
	;PUSH	B		;B értékét betolja a verembe
	MOV	B,#100		;B=100
	DIV	AB		;A/B, eredmény A-ban, maradék B-ben lesz.
	ADD	A,#30H		;A=A+30H
	CALL	S_SOROS_KI	;Ugrik erre a szubrutinra.
	MOV	A,B		;B -> A; B=A
	MOV	B,#10		;B=B+10
	DIV	AB		;A/B, eredmény A-ban, maradék B-ben lesz.
	ADD	A,#30H		;A=A+30H
	CALL	S_SOROS_KI	;Ugrik erre a szubrutinra.
	MOV	A,B		;B -> A; B=A
	ADD	A,#30H		;A=A+30H
	CALL	S_SOROS_KI	;Ugrik erre a szubrutinra.
	;POP	B		;Visszaveszi a veremből B értékét
	POP	ACC		;Visszaveszi a veremből A értékét
	RET			;Visszaugrik oda, ahonnét meghívták.

;erteket olvas soros vonalrol, majd vissza is kuldi. A-ba olvas
S_ECHO:		
	CALL	S_DEC_BE	;Ugrik erre a szubrutinra.
	CALL	S_DEC_KI	;Ugrik erre a szubrutinra.
	RET			;Visszaugrik oda, ahonnét meghívták.

;gombokat olvas. A-ba ir, DPTR valtozik
S_KLAV:
	MOV	DPTR,#0C000H	;Beleteszi az értéket a datapointer regiszterbe.
	MOVX	A,@DPTR		;Külső RAMBÓL helyez indirekten adatot A-ba. A <-(0C000H)
	CPL	A		;Komplementálja A bitjeit.
	RET			;Visszaugrik oda, ahonnét meghívták.

;gombokat olvas, és vár ha nem nyomtam semmit. A-ba ir, DPTR valtozik
S_KLAW:
	CALL	S_KLAV		;Ugrik erre a szubrutinra.
	CJNE	A,#00H,L_AT1	;Összehasonlítja A-t és a regisztert. Ugrik erre a szubrutinra ha a kettő nem egyenlő
	JMP	S_KLAW		;Visszaugrik önmagára.
L_AT1:	
	RET			;Visszaugrik oda, ahonnét meghívták.
	
;gombot olvas, vár amíg nem nyomok semmit, és akkor megy tovább ha elengedem. A-ba ir, DPTR valtozik
S_KLAWE:
	CALL	S_KLAW		;Ugrik erre a szubrutinra.
	PUSH	ACC		;Verembe tolja ACC-t
L_UJ1:
	MOVX	A,@DPTR		;A ba rakja DPTR indirekt értékét külső RAM-ból
	CJNE	A,0FFH,L_UJ1	;Összehasonlítja A-t és a a regisztert. Ugrik erre a szubrutinra, ha a kettő nem egyenlő
	POP	ACC		;Felszabadítja A-t
	RET			;Visszaugrik oda, ahonnét meghívták.
	
;ledeket felvillant. A-ból ír, DPTR változik.
S_LED:
	CPL	A		;Invertálja a biteket A-ban.
	MOV	DPTR,#0C001H	;DPTR-be másolja a címet. 0C001H-tól kezdődnek a ledek.
	MOVX	@DPTR,A		;A-t a külső RAMba másolja
	RET			;Visszaugrik oda, ahonnét meghívták.

;Soros vonalból olvas az aksiba
S_SOROS_BE:
	JNB	RI,S_SOROS_BE	;Ha RI=0, akkor ugrik önmagára vissza.
	CLR	RI		;Törli RI-t
	MOV	A,SBUF		;SBUF tartalmát A-ba írja.
	RET			;Visszaugrik oda, ahonnét meghívták.

;Soros vonalra írja ki az aksit
S_SOROS_KI:
	JNB	TI,S_SOROS_KI	;Ha TI=0, akkor ugrik önmagára vissza.
	CLR	TI		;Törli TI-t
	MOV	SBUF,A		;Acc tartalmát feladja soros postán =3
	RET			;Visszaugrik oda, ahonnét meghívták.

;stringet kuld ki soros vonalon zarobitig. A-t torli, DPTR-t inicializalni kell a szoveg cimere
S_SOROS_TXT:
	CLR	A		;Törli A-t
	MOVC	A,@A+DPTR	;A progmemóriából másol A-ba
	INC	DPTR		;Növeli a datapointer értékét 1-el
	JZ	ZAROBIT		;Ha az aksi értéke 0, akkor ugrik erre a szubrutinra.
	CALL	S_SOROS_KI	;Ugrik erre a szubrutinra.
	JMP	S_SOROS_TXT	;Visszaugrik erre a szubrutinra.
ZAROBIT:
	RET			;Visszaugrik oda, ahonnét meghívták.
	
L_NOVEL:
	INC 	R2		;Növeli R2 értékét 1-el.
	JMP 	L_KIJEL		;Ugrik erre a szubrutinra.
	
L_TOROL:
	MOV 	R2, #0		;Nullázza R2 értékét.
	JMP 	L_KIJEL		;Ugrik erre a szubrutinra.
	
L_CSOKK:
	DEC 	R2		;Csökkenti R2 értékét 1-el.
	JMP 	L_KIJEL		;Ugrik erre a szubrutinra.

L_FULL: 
	MOV 	A, #0FFH	;Feltölti A,t adott értékkel.
	
L_KIJEL:
	CALL 	S_LED		;Ugrik erre a szubrutinra.
	JMP 	L_UJRA		;Visszaugrik a főprogramra.

END
